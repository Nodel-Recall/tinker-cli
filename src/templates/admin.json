{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Create Tinker VPC. For Tinker Admin App, create subnet, IGW, route table, NACL, EC2 with PostgREST and PostgreSQL, SG",

  "Parameters": {
    "StackName": {
      "Type": "String",
      "Default": "TinkerAdminStack",
      "Description": "Name for the CloudFormation stack"
    },

    "Secret": {
      "Type": "String",
      "Description": "For PostgREST to mint and authenticate JWTs. Also required for user sign up into the Admin app."
    },

    "Domain": {
      "Type": "String",
      "Description": "Name of the domain e.g. tinker.com"
    },

    "WildcardSubdomainName": {
      "Type": "String",
      "Description": "Name of the subdomain e.g. *.tinker.com"
    },

    "AdminDomain": {
      "Type": "String",
      "Description": "Name of the admin subdomain e.g. admin.tinker.com"
    },

    "HostedZoneId": {
      "Type": "AWS::Route53::HostedZone::Id",
      "Description": "ID of the hosted zone associated with the admin and project subdomains"
    },

    "LatestAmiId": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id"
    },

    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "tinker_keys",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },

    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Resources": {
    "TinkerVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": "TinkerVPC" }
        ]
      }
    },

    "TinkerAdminSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "TinkerVPC" },
        "AvailabilityZone": {
          "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "CidrBlock": "10.0.0.0/24",
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": "TinkerAdminSubnet" }
        ]
      }
    },

    "TinkerIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": "TinkerIGW" }
        ]
      }
    },

    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "TinkerVPC" },
        "InternetGatewayId": { "Ref": "TinkerIGW" }
      }
    },

    "TinkerAdminRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "TinkerVPC" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": "TinkerAdminRouteTable" }
        ]
      }
    },

    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": { "Ref": "TinkerAdminRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "TinkerIGW" }
      }
    },

    "TinkerAdminSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "TinkerAdminSubnet" },
        "RouteTableId": { "Ref": "TinkerAdminRouteTable" }
      }
    },

    "TinkerAdminNACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "TinkerVPC" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": "TinkerAdminNACL" }
        ]
      }
    },

    "InboundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "TinkerAdminNACL" },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "80", "To": "80" }
      }
    },

    "InboundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "TinkerAdminNACL" },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "22", "To": "22" }
      }
    },

    "InboundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "TinkerAdminNACL" },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "1024", "To": "65535" }
      }
    },

    "OutBoundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "TinkerAdminNACL" },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "80", "To": "80" }
      }
    },

    "OutBoundHTTPSNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "TinkerAdminNACL" },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "443", "To": "443" }
      }
    },

    "OutBoundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "TinkerAdminNACL" },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "1024", "To": "65535" }
      }
    },

    "SubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "TinkerAdminSubnet" },
        "NetworkAclId": { "Ref": "TinkerAdminNACL" }
      }
    },

    "IPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": { "Ref": "TinkerAdminWebServerDB" },
        "Tags": [{ "Key": "Name", "Value": "TinkerAdmin" }]
      }
    },

    "TinkerAdminWebServerDBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "TinkerAdminWebServerDBSecurityGroup",
        "VpcId": { "Ref": "TinkerVPC" },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "SSHLocation" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "CidrIp": "0.0.0.0/0",
            "Description": "PostgREST"
          }
        ]
      }
    },

    "TinkerAdminWebServerDB": {
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M",
          "Count": "1"
        }
      },
      "DependsOn": "AttachGateway",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "full_install": ["install_and_enable_cfn_hup"]
          },
          "install_and_enable_cfn_hup": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource WebServerInstance ",
                      "         --configsets InstallAndRun ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/lib/systemd/system/cfn-hup.service": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[Unit]\n",
                      "Description=cfn-hup daemon\n\n",
                      "[Service]\n",
                      "Type=simple\n",
                      "ExecStart=/usr/local/bin/cfn-hup\n",
                      "Restart=always\n\n",
                      "[Install]\n",
                      "WantedBy=multi-user.target"
                    ]
                  ]
                }
              }
            },
            "commands": {
              "01enable_cfn_hup": {
                "command": "systemctl enable cfn-hup.service"
              },
              "02start_cfn_hup": {
                "command": "systemctl start cfn-hup.service"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Ref": "LatestAmiId"
        },
        "InstanceType": { "Ref": "InstanceType" },
        "AvailabilityZone": {
          "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "KeyName": { "Ref": "KeyName" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": "TinkerAdminApp" }
        ],
        "NetworkInterfaces": [
          {
            "GroupSet": [{ "Ref": "TinkerAdminWebServerDBSecurityGroup" }],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": { "Ref": "TinkerAdminSubnet" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "sudo apt-get update -y\n",
                "sudo apt-get -y install python3-pip\n",
                "mkdir -p /opt/aws/\n",
                "sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz\n",
                "sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup\n",
                "/usr/local/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource TinkerAdminWebServerDB ",
                "         --configsets full_install ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/usr/local/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource TinkerAdminWebServerDB ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "sudo apt update\n",
                "sudo apt install apt-transport-https ca-certificates curl software-properties-common -y\n",
                "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n",
                "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n",
                "sudo apt update\n",
                "curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -\n",
                "sudo apt install nodejs -y\n",
                "cd home/ubuntu && sudo git clone https://github.com/Nodel-Recall/tinker-admin-app.git\n",
                "sudo git clone https://github.com/tinker-base/tinker-admin-cli.git\n",
                "cd tinker-admin-app && sudo npm install -y\n",

                "sudo chown ubuntu:ubuntu .env\n",
                "sudo echo -e \"\nREACT_APP_ADMIN_URL=",
                {
                  "Ref": "AdminDomain"
                },
                "\" >> .env\n",
                "sudo npm run build\n",
                "mv build ../tinker-admin-cli/docker\n",
                "apt-cache policy docker-ce\n",
                "sudo apt install -y docker-ce\n",
                "mkdir -p ~/.docker/cli-plugins/\n",
                "curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose\n",
                "chmod +x ~/.docker/cli-plugins/docker-compose\n",
                "echo \"export PGRST_JWT_SECRET=",
                {
                  "Ref": "Secret"
                },
                "\" >> /etc/environment\n",
                "sudo -u ubuntu sh -c 'cd ~ && cd tinker-admin-cli/docker && sudo docker compose up -d'\n"
              ]
            ]
          }
        }
      }
    },

    "TinkerALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "TinkerALB",
        "Scheme": "internet-facing",
        "Type": "application",
        "Subnets": [
          {
            "Ref": "TinkerAdminSubnet"
          },
          {
            "Ref": "TinkerEmptySubnet"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "TinkerALBSecurityGroup"
          }
        ],
        "IpAddressType": "ipv4"
      },
      "DependsOn": ["TinkerEmptySubnet", "TinkerALBSecurityGroup"]
    },

    "TinkerALBListenerNGINX": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "TinkerALB"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS13-1-2-2021-06",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "TinkerSubdomainCert"
            }
          }
        ],
        "DefaultActions": [
          {
            "FixedResponseConfig": {
              "MessageBody": "Please specify a project or the admin subdomain",
              "StatusCode": "400",
              "ContentType": "text/plain"
            },
            "Order": 1,
            "Type": "fixed-response"
          }
        ]
      },
      "DependsOn": ["TinkerALB", "TinkerSubdomainCert"]
    },

    "TinkerALBListenerPostgREST": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "TinkerALB"
        },
        "Port": 3000,
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS13-1-2-2021-06",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "TinkerSubdomainCert"
            }
          }
        ],
        "DefaultActions": [
          {
            "FixedResponseConfig": {
              "MessageBody": "Please specify a project or the admin subdomain",
              "StatusCode": "400",
              "ContentType": "text/plain"
            },
            "Order": 1,
            "Type": "fixed-response"
          }
        ]
      },
      "DependsOn": ["TinkerALB", "TinkerSubdomainCert"]
    },

    "TinkerALBListenerRuleAdminNGINX": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Priority": "1",
        "ListenerArn": {
          "Ref": "TinkerALBListenerNGINX"
        },
        "Conditions": [
          {
            "Field": "host-header",
            "Values": [{ "Ref": "AdminDomain" }]
          }
        ],
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TinkerTargetGroupAdminNGINX"
            },
            "Order": 1,
            "ForwardConfig": {
              "TargetGroups": [
                {
                  "TargetGroupArn": {
                    "Ref": "TinkerTargetGroupAdminNGINX"
                  },
                  "Weight": 1
                }
              ]
            }
          }
        ]
      },
      "DependsOn": ["TinkerALBListenerNGINX"]
    },

    "TinkerALBListenerRuleAdminPostgREST": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Priority": "1",
        "ListenerArn": {
          "Ref": "TinkerALBListenerPostgREST"
        },
        "Conditions": [
          {
            "Field": "host-header",
            "Values": [{ "Ref": "AdminDomain" }]
          }
        ],
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TinkerTargetGroupAdminPostgREST"
            },
            "Order": 1,
            "ForwardConfig": {
              "TargetGroups": [
                {
                  "TargetGroupArn": {
                    "Ref": "TinkerTargetGroupAdminPostgREST"
                  },
                  "Weight": 1
                }
              ]
            }
          }
        ]
      },
      "DependsOn": ["TinkerALBListenerPostgREST"]
    },

    "TinkerALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Tinker ALB Security Group",
        "GroupName": "TinkerALBSecurityGroup",
        "VpcId": { "Ref": "TinkerVPC" },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "PostgREST",
            "FromPort": 3000,
            "IpProtocol": "tcp",
            "ToPort": 3000
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "-1"
          }
        ]
      },
      "DependsOn": ["TinkerVPC"]
    },

    "TinkerTargetGroupAdminNGINX": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": { "Ref": "TinkerVPC" },
        "Name": "TinkerTargetGroupAdminNGINX",
        "HealthCheckEnabled": true,
        "Targets": [
          {
            "Id": {
              "Ref": "TinkerAdminWebServerDB"
            },
            "Port": 80
          }
        ]
      },
      "DependsOn": ["TinkerVPC", "TinkerAdminWebServerDB"]
    },

    "TinkerTargetGroupAdminPostgREST": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": { "Ref": "TinkerVPC" },
        "Name": "TinkerTargetGroupAdminPostgREST",
        "HealthCheckEnabled": true,
        "Targets": [
          {
            "Id": {
              "Ref": "TinkerAdminWebServerDB"
            },
            "Port": 3000
          }
        ]
      },
      "DependsOn": ["TinkerVPC", "TinkerAdminWebServerDB"]
    },

    "TinkerEmptySubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "TinkerVPC" },
        "AvailabilityZone": {
          "Fn::Select": [1, { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "CidrBlock": "10.0.1.0/24",
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": "TinkerEmptySubnet" }
        ]
      },
      "DependsOn": ["TinkerVPC"]
    },

    "TinkerEmptySubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "TinkerEmptySubnet" },
        "RouteTableId": { "Ref": "TinkerAdminRouteTable" }
      },
      "DependsOn": ["TinkerAdminRouteTable"]
    },

    "TinkerRecordSetAdmin": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": {
          "Ref": "AdminDomain"
        },
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::GetAtt": ["TinkerALB", "CanonicalHostedZoneID"]
          },
          "DNSName": {
            "Fn::GetAtt": ["TinkerALB", "DNSName"]
          }
        },
        "Type": "A"
      },
      "DependsOn": ["TinkerALB"]
    },

    "TinkerSubdomainCert": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": {
          "Ref": "WildcardSubdomainName"
        },
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Ref": "WildcardSubdomainName"
            },
            "HostedZoneId": {
              "Ref": "HostedZoneId"
            }
          }
        ],
        "ValidationMethod": "DNS"
      },
      "DependsOn": ["TinkerRecordSetAdmin"]
    }
  },

  "Outputs": {
    "TinkerRegion": {
      "Description": "Region for Tinker projects",
      "Value": {
        "Fn::Sub": "${AWS::Region}"
      },
      "Export": { "Name": "TinkerRegion" }
    },
    "URL": {
      "Value": {
        "Fn::Join": [
          "",
          ["http://", { "Fn::GetAtt": ["TinkerAdminWebServerDB", "PublicIp"] }]
        ]
      },
      "Description": "Newly created application URL"
    },
    "SubnetId": {
      "Description": "Subnet for future EC2 instances",
      "Value": { "Ref": "TinkerAdminSubnet" },
      "Export": { "Name": "ProjectSubnetId" }
    },
    "TinkerVpcId": {
      "Description": "Tinker VPC Id",
      "Value": { "Ref": "TinkerVPC" },
      "Export": { "Name": "TinkerVpcId" }
    },
    "SecurityGroupId": {
      "Description": "Security group for EC2",
      "Value": { "Ref": "TinkerAdminWebServerDBSecurityGroup" },
      "Export": { "Name": "SecurityGroupId" }
    },
    "TinkerALBListenerPostgRESTArn": {
      "Description": "Tinker ALB Listener for PostgREST traffic",
      "Value": { "Ref": "TinkerALBListenerPostgREST" },
      "Export": { "Name": "TinkerALBListenerPostgRESTArn" }
    },
    "TinkerDomainName": {
      "Description": "Domain name for Tinker projects",
      "Value": { "Ref": "Domain" },
      "Export": { "Name": "TinkerDomainName" }
    },
    "TinkerAdminDomain": {
      "Description": "Admin subdomain name",
      "Value": { "Ref": "AdminDomain" },
      "Export": { "Name": "TinkerSubdomainName" }
    },
    "TinkerProjectsHostedZoneId": {
      "Description": "Hosted Zone Id of Tinker project subdomains",
      "Value": { "Ref": "HostedZoneId" },
      "Export": { "Name": "TinkerProjectsHostedZoneId" }
    },
    "TinkerALBHostedZoneId": {
      "Description": "Hosted Zone Id of the ALB",
      "Value": { "Fn::GetAtt": ["TinkerALB", "CanonicalHostedZoneID"] },
      "Export": { "Name": "TinkerALBHostedZoneId" }
    },
    "TinkerALBDNSName": {
      "Description": "DNS name of the ALB",
      "Value": { "Fn::GetAtt": ["TinkerALB", "DNSName"] },
      "Export": { "Name": "TinkerALBDNSName" }
    }
  }
}
