{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Create a project EC2 in the Tinker VPC",

  "Parameters": {
    "StackName": {
      "Type": "String",
      "Default": "ProjectInstance",
      "Description": "Name for the CloudFormation stack"
    },

    "ProjectName": {
      "Type": "String",
      "Default": "ProjectInstance",
      "Description": "Name for the EC2 Instance"
    },

    "RulePriority": {
      "Type": "String",
      "Description": "Set the listener rule priority."
    },

    "LatestAmiId": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id"
    },

    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "tinker_keys",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },

    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Resources": {
    "TinkerRecordSetProject": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              ".",
              {
                "Fn::ImportValue": "TinkerDomainName"
              }
            ]
          ]
        },
        "HostedZoneId": {
          "Fn::ImportValue": "TinkerProjectsHostedZoneId"
        },
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::ImportValue": "TinkerALBHostedZoneId"
          },
          "DNSName": {
            "Fn::ImportValue": "TinkerALBDNSName"
          }
        },
        "Type": "A"
      }
    },

    "TinkerALBListenerRuleProjectPostgREST": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Priority": {
          "Ref": "RulePriority"
        },
        "ListenerArn": {
          "Fn::ImportValue": "TinkerALBListenerPostgRESTArn"
        },
        "Conditions": [
          {
            "Field": "host-header",
            "Values": [
              {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "ProjectName"
                    },
                    ".",
                    {
                      "Fn::ImportValue": "TinkerDomainName"
                    }
                  ]
                ]
              }
            ]
          }
        ],
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TinkerTargetGroupProjectPostgREST"
            },
            "Order": 1,
            "ForwardConfig": {
              "TargetGroups": [
                {
                  "TargetGroupArn": {
                    "Ref": "TinkerTargetGroupProjectPostgREST"
                  },
                  "Weight": 1
                }
              ]
            }
          }
        ]
      },
      "DependsOn": ["TinkerTargetGroupProjectPostgREST"]
    },

    "TinkerTargetGroupProjectPostgREST": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": { "Fn::ImportValue": "TinkerVpcId" },
        "Name": {
          "Ref": "ProjectName"
        },
        "HealthCheckEnabled": true,
        "Targets": [
          {
            "Id": {
              "Ref": "ProjectInstance"
            },
            "Port": 3000
          }
        ]
      },
      "DependsOn": ["ProjectInstance"]
    },

    "ProjectInstance": {
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M",
          "Count": "1"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "full_install": ["install_and_enable_cfn_hup"]
          },
          "install_and_enable_cfn_hup": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource WebServerInstance ",
                      "         --configsets InstallAndRun ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/lib/systemd/system/cfn-hup.service": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[Unit]\n",
                      "Description=cfn-hup daemon\n\n",
                      "[Service]\n",
                      "Type=simple\n",
                      "ExecStart=/usr/local/bin/cfn-hup\n",
                      "Restart=always\n\n",
                      "[Install]\n",
                      "WantedBy=multi-user.target"
                    ]
                  ]
                }
              }
            },
            "commands": {
              "01enable_cfn_hup": {
                "command": "systemctl enable cfn-hup.service"
              },
              "02start_cfn_hup": {
                "command": "systemctl start cfn-hup.service"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Ref": "LatestAmiId"
        },
        "InstanceType": { "Ref": "InstanceType" },
        "AvailabilityZone": {
          "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }]
        },
        "KeyName": { "Ref": "KeyName" },
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": { "Ref": "ProjectName" } }
        ],
        "NetworkInterfaces": [
          {
            "GroupSet": [{ "Fn::ImportValue": "SecurityGroupId" }],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": { "Fn::ImportValue": "ProjectSubnetId" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "sudo apt-get update -y\n",
                "sudo apt-get -y install python3-pip\n",
                "mkdir -p /opt/aws/\n",
                "sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz\n",
                "sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup\n",
                "/usr/local/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ProjectInstance ",
                "         --configsets full_install ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/usr/local/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ProjectInstance ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },

                "\n",
                "sudo apt update\n",
                "sudo apt install apt-transport-https ca-certificates curl software-properties-common -y\n",
                "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n",
                "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n",
                "sudo apt update\n",
                "apt-cache policy docker-ce\n",
                "sudo apt install -y docker-ce\n",
                "mkdir -p ~/.docker/project-plugins/\n",
                "curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/project-plugins/docker-compose\n",
                "chmod +x ~/.docker/project-plugins/docker-compose\n",
                "sudo -u ubuntu sh -c 'cd ~ && sudo git clone https://github.com/tinker-base/tinker-admin-cli.git && cd tinker-admin-cli/docker && sudo docker compose up -d'\n"
              ]
            ]
          }
        }
      }
    }
  },

  "Outputs": {
    "URL": {
      "Value": {
        "Fn::Join": [
          "",
          ["http://", { "Fn::GetAtt": ["ProjectInstance", "PublicIp"] }]
        ]
      },
      "Description": "Newly created application URL"
    }
  }
}
