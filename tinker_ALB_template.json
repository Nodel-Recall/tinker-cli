{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "",

  "Parameters": {
    "TinkerVPCId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Tinker VPC ID"
    },
    "TinkerAdminSubnetId": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Tinker Admin Subnet ID"
    },
    "TinkerAdminAppEC2Id": {
      "Type": "AWS::EC2::Instance::Id",
      "Description": "Tinker Admin App EC2 ID"
    },
    "SubdomainName": {
      "Type": "String",
      "Description": "Name of the subdomain e.g. *.tinker.com"
    },
    "AdminSubdomain": {
      "Type": "String",
      "Description": "Name of the admin subdomain e.g. admin.tinker.com"
    },
    "HostedZoneName": {
      "Type": "String",
      "Description": "Name of the hosted zone (domain with a trailing dot). E.g. tinker.com."
    },
    "HostedZoneId": {
      "Type": "AWS::Route53::HostedZone::Id",
      "Description": "ID of the hosted zone associated with the admin subdomain"
    }
  },

  "Resources": {
    "TinkerALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "TinkerALB",
        "Scheme": "internet-facing",
        "Type": "application",
        "Subnets": [
          {
            "Ref": "TinkerAdminSubnetId"
          },
          {
            "Ref": "TinkerEmptySubnet"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "TinkerALBSecurityGroup"
          }
        ],
        "IpAddressType": "ipv4"
      },
      "DependsOn": ["TinkerEmptySubnet", "TinkerALBSecurityGroup"]
    },

    "TinkerALBListenerAdminNGINX": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "TinkerALB"
        },
        "Port": 443,
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS13-1-2-2021-06",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "TinkerSubdomainCert"
            }
          }
        ],
        "DefaultActions": [
          {
            "FixedResponseConfig": {
              "MessageBody": "Please specify a project or the admin subdomain",
              "StatusCode": "400",
              "ContentType": "text/plain"
            },
            "Order": 1,
            "Type": "fixed-response"
          }
        ]
      },
      "DependsOn": ["TinkerALB", "TinkerSubdomainCert"]
    },

    "TinkerALBListenerAdminPostgREST": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "TinkerALB"
        },
        "Port": 3000,
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS13-1-2-2021-06",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "TinkerSubdomainCert"
            }
          }
        ],
        "DefaultActions": [
          {
            "FixedResponseConfig": {
              "MessageBody": "Please specify a project or the admin subdomain",
              "StatusCode": "400",
              "ContentType": "text/plain"
            },
            "Order": 1,
            "Type": "fixed-response"
          }
        ]
      },
      "DependsOn": ["TinkerALB", "TinkerSubdomainCert"]
    },

    "TinkerALBListenerRuleAdminNGINX": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Priority": "1",
        "ListenerArn": {
          "Ref": "TinkerALBListenerAdminNGINX"
        },
        "Conditions": [
          {
            "Field": "host-header",
            "Values": [{ "Ref": "AdminSubdomain" }]
          }
        ],
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TinkerTargetGroupAdminNGINX"
            },
            "Order": 1,
            "ForwardConfig": {
              "TargetGroups": [
                {
                  "TargetGroupArn": {
                    "Ref": "TinkerTargetGroupAdminNGINX"
                  },
                  "Weight": 1
                }
              ]
            }
          }
        ]
      },
      "DependsOn": ["TinkerALBListenerAdminNGINX"]
    },

    "TinkerALBListenerRuleAdminPostgREST": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Priority": "1",
        "ListenerArn": {
          "Ref": "TinkerALBListenerAdminPostgREST"
        },
        "Conditions": [
          {
            "Field": "host-header",
            "Values": [{ "Ref": "AdminSubdomain" }]
          }
        ],
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TinkerTargetGroupAdminPostgREST"
            },
            "Order": 1,
            "ForwardConfig": {
              "TargetGroups": [
                {
                  "TargetGroupArn": {
                    "Ref": "TinkerTargetGroupAdminPostgREST"
                  },
                  "Weight": 1
                }
              ]
            }
          }
        ]
      },
      "DependsOn": ["TinkerALBListenerAdminPostgREST"]
    },

    "TinkerALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Tinker ALB Security Group",
        "GroupName": "TinkerALBSecurityGroup",
        "VpcId": { "Ref": "TinkerVPCId" },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "PostgREST",
            "FromPort": 3000,
            "IpProtocol": "tcp",
            "ToPort": 3000
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "-1"
          }
        ]
      }
    },

    "TinkerTargetGroupAdminNGINX": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": { "Ref": "TinkerVPCId" },
        "Name": "TinkerTargetGroupAdminNGINX",
        "HealthCheckEnabled": true,
        "Targets": [
          {
            "Id": {
              "Ref": "TinkerAdminAppEC2Id"
            },
            "Port": 80
          }
        ]
      }
    },

    "TinkerTargetGroupAdminPostgREST": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": { "Ref": "TinkerVPCId" },
        "Name": "TinkerTargetGroupAdminPostgREST",
        "HealthCheckEnabled": true,
        "Targets": [
          {
            "Id": {
              "Ref": "TinkerAdminAppEC2Id"
            },
            "Port": 3000
          }
        ]
      }
    },

    "TinkerEmptySubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "TinkerVPCId" },
        "AvailabilityZone": {
          "Fn::Sub": "${AWS::Region}c"
        },
        "CidrBlock": "10.0.1.0/24",
        "Tags": [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } },
          { "Key": "Name", "Value": "TinkerEmptySubnet" }
        ]
      }
    },

    "TinkerRecordSetAdmin": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": {
          "Ref": "AdminSubdomain"
        },
        "HostedZoneName": {
          "Ref": "HostedZoneName"
        },
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::GetAtt": ["TinkerALB", "CanonicalHostedZoneID"]
          },
          "DNSName": {
            "Fn::GetAtt": ["TinkerALB", "DNSName"]
          }
        },
        "Type": "A"
      },
      "DependsOn": ["TinkerALB"]
    },

    "TinkerSubdomainCert": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": {
          "Ref": "SubdomainName"
        },
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Ref": "SubdomainName"
            },
            "HostedZoneId": {
              "Ref": "HostedZoneId"
            }
          }
        ],
        "ValidationMethod": "DNS"
      },
      "DependsOn": ["TinkerRecordSetAdmin"]
    }
  }
}
